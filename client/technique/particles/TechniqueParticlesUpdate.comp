layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle {   
    float PositionX;
    float PositionY;
    float PositionZ;
    float VelocityX;
    float VelocityY;
    float VelocityZ;
    float AccelerationX;
    float AccelerationY;
    float AccelerationZ;
    float ColorR;
    float ColorG;
    float ColorB;
    float ColorChangeR;
    float ColorChangeG;
    float ColorChangeB;
    float Width;
    float Height;
    float WidthChange;
    float HeightChange;
    float LifeTime;
};
layout(std430, binding = 0) buffer InputBuffer 
{
    Particle iParticles[];
};  
layout(std430, binding = 1) buffer OutputBuffer 
{
    Particle oParticles[];
};  
layout(binding = 2) uniform atomic_uint ParticleCounter;
uniform float uDeltaTime;

void main() {
    uint inI = gl_GlobalInvocationID.x;
    Particle p = iParticles[inI];
    p.LifeTime -= uDeltaTime;
    if(p.LifeTime > 0.0) {
        vec3 vel = vec3(p.AccelerationX, p.AccelerationY, p.AccelerationZ) * uDeltaTime + vec3(p.VelocityX, p.VelocityY, p.VelocityZ);
        vec3 pos = vel * uDeltaTime + vec3(p.PositionX, p.PositionY, p.PositionZ);
        p.VelocityX = vel.x;
        p.VelocityY = vel.y;
        p.VelocityZ = vel.z;
        p.PositionX = pos.x;
        p.PositionY = pos.y;
        p.PositionZ = pos.z;
        vec3 color = vec3(p.ColorChangeR, p.ColorChangeG, p.ColorChangeB) * uDeltaTime + vec3(p.ColorR, p.ColorG, p.ColorB);
        p.ColorR = color.r;
        p.ColorG = color.g;
        p.ColorB = color.b;
        vec2 size = vec2(p.WidthChange, p.HeightChange) * uDeltaTime + vec2(p.Width, p.Height);
        p.Width = size.x;
        p.Height = size.y;
        uint outI = atomicCounterIncrement(ParticleCounter);
        oParticles[outI] = p;
    }
}