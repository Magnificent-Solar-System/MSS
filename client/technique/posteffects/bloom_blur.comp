layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (rgba16f, binding = 1) uniform readonly highp image2D inputTexture;
layout (rgba16f, binding = 2) uniform writeonly highp image2D bluredTexture;

uniform bool uHorizontal;
const int uBlurCount = 32;
const float uBlurSize = 0.100;

//const float weight[10] = float[] (0.197413, 0.174667, 0.120978, 0.065591, 0.027835, 0.009245, 0.002403, 0.000489, 0.000078, 0.00001);
//const float weight[10] = float[] (0.101253, 0.098154, 0.089414, 0.076542, 0.061573, 0.046546, 0.033065, 0.022072, 0.013846, 0.008162);

//4? 31
//const float weight[16] = float[] (0.099487, 0.096442, 0.087854, 0.075207, 0.060499, 0.045734, 0.032488, 0.021687, 0.013605, 0.00802, 0.004443, 0.002313, 0.001131, 0.00052, 0.000225, 0.000091);
//10 63
const float weight[32] = float[] (0.039943, 0.039744, 0.039153, 0.038187, 0.036874, 0.035253, 0.033368, 0.03127, 0.029012, 0.02665, 0.024237, 0.021823, 0.019454, 0.01717, 0.015003, 0.01298, 0.011117, 0.009428, 0.007915, 0.006579, 0.005415, 0.004412, 0.003559, 0.002842, 0.002248, 0.00176, 0.001364, 0.001047, 0.000795, 0.000598, 0.000445, 0.000328);

void main() {  
  ivec2 p = ivec2(gl_GlobalInvocationID.xy);
  float k = float(imageSize(inputTexture).y) * uBlurSize / float(uBlurCount);

  vec3 result = imageLoad(inputTexture, p).rgb * weight[0];
  if(uHorizontal) {
    for(int i = 1; i < uBlurCount; ++i) {
        result += (imageLoad(inputTexture, p + ivec2(float(i) * k, 0)).rgb + imageLoad(inputTexture, p - ivec2(float(i) * k, 0)).rgb) * weight[i];
    }
  } else {
    for(int i = 1; i < uBlurCount; ++i) {
        result += (imageLoad(inputTexture, p + ivec2(0, float(i) * k)).rgb + imageLoad(inputTexture, p - ivec2(0, float(i) * k)).rgb) * weight[i];
    }
  }
  imageStore(bluredTexture, p, vec4(result, 1.0));
}